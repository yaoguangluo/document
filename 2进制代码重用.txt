摘自软件学报 china

2016
年
6
月
,
Intel
发布了称为
Control
-
flow Enforcement Technology(CET)
的技术预览白皮书
,
正式公开了其
准备推出的
主要用于防护
ROP
、
COP
/JOP(call/jump oriented programming)
的芯片级解决方案
.
该方案
的
核心思
想
源自
学术界早先提出的
s
hadow s
tack
,
即
在系统中的特定内存区域构造一个
专门用来
存储间接跳转数据的栈
[47,84]
.
具体地
:
当一个子函数被调用时
,
像传统方式一样
,
其返回地址将会被保存到线程栈上
;
同时也会被保存到
shadow  stack
上
;
在程序后续执行中
,
遇到返回指令
,
则处理器需要保证线程栈上的返回地址与影子栈中的地址
相匹配
.
如果二者不匹配
,
处理器将会抛出异常
,
使得操作系统能够捕获该异常并停止程序执行
.
在
CET
技术中
,
Intel
从
CPU
级别
对
shadow stack
提供了安全特性支持
.
S
hadow stack
仅用于控制流
转移操
作
,
其中保存了
函数返回地址等
,
与一般的数据栈相对独立
.
为了防止
shadow stack
被篡改
,
Intel
通过
CPU
的内存
管理单元
MMU
在页表保护中提供了新的扩展属性
,
使得页内存除了具备读
、
写
、
执行
保护外
,
还可被标记为
shadow stack
页
.
被标记为
s
hadow stack
的内存页
,
普通软件
和指令无法直接对其进行写操作
;
只有通过特定的控
制流转移指令和
Intel
提供的
专门的
s
hadow stack
操作指令才能实现对
s
hadow stack
的写操作
,
从而
从硬件体系
结构提供了
shadow stack
这一
安
全特性
.
此外
,
Intel
还提供了一个新
寄存器
SSP
(shadow stack pointer)
,
该寄存器始终指向
shadow stack
栈顶
.
当
CET
功能打开时
,
执行函数返回指令时
,
CPU
将自动的从
SSP
寄存器
指向的
shadow  stack
栈顶
处
取
保存的返回地址
并与
普通栈中的
返回
地址进行对比
,
二者如果不一致
,
CPU
则抛出异常
,
操作系统捕获该异常后进行后续处理
.
